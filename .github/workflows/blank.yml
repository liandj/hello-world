name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # 触发分支

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. 检出代码
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. 编译打包（示例为 Go 项目，其他语言需调整）
      - name: Build Application
        run: |
          echo "test"

      # 3. 构建并推送 Docker 镜像
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ github.run_number }}

      # 4. 修改 deployment.yaml 中的镜像标签
      - name: Update Image in Kubernetes Manifest
        run: |
          # 使用 sed 替换镜像名称（确保路径正确）
          sed -i "s|image:.*|image: ${{ secrets.DOCKER_REGISTRY }}/my-app:${{ github.run_number }}|" ./deployment.yaml

      # 5. 提交修改后的 deployment.yaml（可选：若配置仓库与代码仓库分离需调整）
      - name: Commit Manifest Changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add ./deployment.yaml
          git commit -m "Update image to ${{ github.run_number }}"
          git push

      # 6. 触发 ArgoCD 同步（通过 API）
      - name: ArgoCD Action
        run: echo "edit deployment success"
